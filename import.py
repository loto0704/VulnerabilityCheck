import os.path
import sys
import json
import sqlite3
import ulid

CONFIG_FILE = "config.json"


def path_get():
    json_open = open(CONFIG_FILE, 'r')
    json_load = json.load(json_open)
    json_open.close()

    return json_load


# データベースがあるか確認：ない場合→作成
def check_db(db_path):
    if not os.path.exists(db_path):
        with open(db_path, "w") as f:
            f.write("")


# DB接続
class DatabaseConnect:
    def __init__(self, db_path: str) -> None:
        self.db_path = db_path

    # SQL実行
    def db_execute(self, sql: str) -> None:
        connect = sqlite3.connect(self.db_path)
        cursor = connect.cursor()
        cursor.execute(sql)
        connect.commit()
        cursor.close()
        connect.close()

    # SQL実行：パラメータ付き
    def db_execute_many(self, sql, params) -> None:
        connect = sqlite3.connect(self.db_path)
        cursor = connect.cursor()
        cursor.executemany(sql, params)
        cursor.close()
        connect.close()

    # 参照用
    def sql_reference(self, sql) -> list:
        connect = sqlite3.connect(self.db_path)
        cursor = connect.cursor()
        cursor.execute(sql)
        table_list = cursor.fetchall()
        cursor.close()
        connect.close()
        return table_list


def tabel_check(db_path: str) -> None:
    db_connect = DatabaseConnect(db_path)
    env_tables_sql = '''SELECT name
        FROM sqlite_master
        WHERE type='table';'''
    table_data = db_connect.sql_reference(env_tables_sql)
    table_list = []
    for i in range(len(table_data)):
        table_list.append(table_data[i][0])

    # 「environments」テーブルの確認：ない場合→作成（無効化中）
    """
    if not ("environments" in table_list):
        crete_env_sql = '''CREATE TABLE environments(
            name TEXT PRIMARY KEY,
            description TEXT,
            create_date INTEGER);'''
        db_connect.db_execute(crete_env_sql)
    """

    # 「libraries」テーブルの確認：ない場合→作成
    if not ("libraries" in table_list):
        create_library_sql = '''CREATE TABLE libraries(
                id TEXT PRIMARY KEY,
                environments TEXT NOT NULL,
                library_name TEXT NOT NULL,
                search_library_name TEXT,
                library_ver TEXT NOT NULL,
                search_library_ver TEXT,
                security_advisories TEXT,
                search_url TEXT,
                check_last_date TEXT);'''
        db_connect.db_execute(create_library_sql)


def txt_read(requirements_path, venv_name):
    data = []
    with open(requirements_path, mode='r', encoding='UTF-8') as f:
        for line in f.readlines():
            library_id = ulid.ulid()
            data_tuple = (library_id, line.split('==')[0], line.split('==')[1].replace('\n', ""), venv_name)
            data.append(data_tuple)

    return data


def insert_library(db_path: str, data: list):
    db_connect = DatabaseConnect(db_path)
    sql = '''INSERT INTO libraries(id, library_name, library_ver, environments)
        VALUES(?, ?, ?, ?)'''
    db_connect.db_execute_many(sql, data)


# 引数確認
def argument_check():
    # requirementsファイルの確認
    try:
        requirements_path = sys.argv[1]
    except IndexError:
        print("引数が正しく指定されてません")
        exit()
    else:
        if not os.path.exists(requirements_path):
            print("Pythonパッケージリストのファイルが確認できませんでした")
            exit()

    # 仮想環境名の確認
    try:
        venv_name = sys.argv[2]
    except IndexError:
        print("仮想環境名が確認できませんでした")
        exit()

    return requirements_path, venv_name


def main():
    requirements_path, venv_name = argument_check()

    json_data = path_get()
    db_path = json_data["db_path"]
    if db_path == "":
        db_path = "library.sqlite"

    # テーブルの有無確認
    tabel_check(db_path)

    # requirements.txt読み込み
    library_data = txt_read(requirements_path, venv_name)

    # ライブラリデータインポート（SQL実行）
    insert_library(db_path, library_data)


if __name__ == '__main__':
    main()
