# -*- coding:utf-8 -*-
import sys
import time, pandas, json, os, datetime

from selenium import webdriver
from selenium.webdriver.chrome import service
from selenium.webdriver.common.by import By

BASE_URL = "https://deps.dev/"


def main():
    json_data = path_get()
    file_name = f"vulnerability_check_{datetime.date.today()}.xlsx"
    if json_data["output_folder_path"] == "":
        output_folder_path = os.path.expanduser('~/Downloads')
    else:
        output_folder_path = json_data["output_folder_path"]
    export_full_path = f"{output_folder_path}/{file_name}"

    data_dict = txt_read()
    pd_data = scraping(data_dict, json_data["driver_path"])
    pd_data = pd_data.rename(columns={"library_name": "ライブラリ名",
                                      "search_value": "検索値",
                                      "library_ver": "バージョン",
                                      "security_advisories": "セキュリティアドバイス",
                                      "search_url": "URL"})
    pd_data.to_excel(export_full_path, index=False, header=True)


def path_get():
    json_open = open(CONFIG_FILE, 'r')
    json_load = json.load(json_open)
    json_open.close()

    return json_load


# スクレイピング
def scraping(data_dict, driver_path):
    chrome_service = service.Service(executable_path=driver_path)
    driver = webdriver.Chrome(service=chrome_service)
    for i in range(len(data_dict)):
        library_name = data_dict[i]['library_name']
        search_value = str(library_name).lower()
        library_ver = data_dict[i]['library_ver']

        url = f"{BASE_URL}pypi/{search_value}/{library_ver}"
        driver.get(url)
        time.sleep(3)

        try:
            security_advisories = driver.find_element(by=By.XPATH, value="/html/body/div/div[1]/div/div/div/div/div[1]/div[1]/div[1]/span").text
        except:
            try:
                time.sleep(3)
                # Version Not Found
                security_advisories = driver.find_element(by=By.XPATH, value="/html/body/div/div[1]/div/div/div/div/h1").text
            except:
                security_advisories = "error"

        data_dict[i]["search_value"] = search_value
        data_dict[i]["security_advisories"] = security_advisories
        data_dict[i]["search_url"] = url
        time.sleep(3)

    driver.close()

    data = pandas.DataFrame.from_dict(data_dict).T
    data = data.reindex(columns=["library_name", "search_value", "library_ver", "security_advisories", "search_url"])

    return data


# txtファイル読み込み
def txt_read():
    count = 0
    data_dict = {}
    with open('requirements.txt', mode='r', encoding='UTF-16') as f:
        for line in f.readlines():
            data_dict[count] = {}
            data_dict[count]["library_name"] = line.split('==')[0]
            data_dict[count]["library_ver"] = line.split('==')[1].replace("\n", "")
            count += 1

    return data_dict


if __name__ == '__main__':
    try:
        CONFIG_FILE = sys.argv[1]
    except:
        CONFIG_FILE = "config.json"

    main()
